"simple test cases"

from dataclasses import dataclass
import datetime
from pathlib import Path

from ymcacals.ymcacals import CalendarMerger, fetch_urls


@dataclass
class Args:
    "mimic args generated by argparse."
    urls: str = ""
    output: str = "/dev/null"
    start: datetime.date = datetime.date(2000, 1, 1)
    end: datetime.date = datetime.date(2050, 12, 31)
    verbose: bool = False
    confirmed: bool = True

def test_basic(httpserver):
    args = Args()
    args.confirmed = True
    with open("./tests/skip.ics", encoding="utf-8") as ics:
        httpserver.expect_request("/skip.ics"). \
            respond_with_data(ics.read(), content_type="text/plain")
        calendars = fetch_urls(Path(__file__).parent / "skip.csv",
            httpserver.url_for("/"))
        merger = CalendarMerger(args)
        merger.verbose = False
        merged = merger.merge_cals(calendars)
        assert len(merged.events) == 29
        uids = set()
        for event in merged.events:
            assert event["SUMMARY"].lower() == "skip m"
            uids.add(event["UID"])
        assert len(uids) == len(merged.events)

def test_date_filter(httpserver):
    args = Args()
    args.confirmed = True
    with open("./tests/skip.ics", encoding="utf-8") as ics:
        httpserver.expect_request("/skip.ics"). \
            respond_with_data(ics.read(), content_type="text/plain")
        calendars = fetch_urls(Path(__file__).parent / "skip.csv",
            httpserver.url_for("/"))
        merger = CalendarMerger(args)
        merger.verbose = False
        merger.start = datetime.date(2025, 6, 1)
        merger.end = datetime.date(2025, 7, 1)
        merged = merger.merge_cals(calendars)
        assert len(merged.events) == 7
