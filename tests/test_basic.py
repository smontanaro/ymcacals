"simple test cases"

from dataclasses import dataclass
import datetime
from pathlib import Path
import subprocess
import sys

import pytest

from ymcacals.ymcacals import CalendarMerger, fetch_urls


@dataclass
class Args:
    "mimic args generated by argparse."
    urls: str = ""
    output: str = "/dev/null"
    start: datetime.date = datetime.date(2000, 1, 1)
    end: datetime.date = datetime.date(2050, 12, 31)
    verbose: bool = False
    confirmed: bool = True

@pytest.mark.parametrize(("verbose",),
                         [(True,), (False,)])
def test_basic(httpserver, verbose):
    args = Args()
    args.confirmed = True
    args.verbose = verbose
    with open("./tests/skip.ics", encoding="utf-8") as ics:
        httpserver.expect_request("/skip.ics"). \
            respond_with_data(ics.read(), content_type="text/plain")
        calendars = fetch_urls(urls=Path(__file__).parent / "skip.csv",
            _test_pfx=httpserver.url_for("/"),
            delta=0.1)
        merger = CalendarMerger(args)
        merged = merger.merge_cals(calendars)
        assert len(merged.events) == 28
        uids = set()
        for event in merged.events:
            assert event["SUMMARY"].lower() == "skip m"
            uids.add(event["UID"])
        assert len(uids) == len(merged.events)

@pytest.mark.parametrize(("verbose",),
                         [(True,), (False,)])
def test_date_filter(httpserver, verbose):
    args = Args()
    args.confirmed = True
    args.verbose = verbose
    with open("./tests/skip.ics", encoding="utf-8") as ics:
        httpserver.expect_request("/skip.ics"). \
            respond_with_data(ics.read(), content_type="text/plain")
        calendars = fetch_urls(urls=Path(__file__).parent / "skip.csv",
            _test_pfx=httpserver.url_for("/"),
            delta=0.1)
        merger = CalendarMerger(args)
        merger.start = datetime.date(2025, 6, 1)
        merger.end = datetime.date(2025, 7, 1)
        merged = merger.merge_cals(calendars)
        assert len(merged.events) == 7


@pytest.mark.parametrize(("verbose",),
                         [(True,), (False,)])
@pytest.mark.parametrize(("start", "end", "returncode",),
                         [("2025-06-01", "2025-07-01", 0),
                          ("2025-06-01", "2025-07-zz", 2)])
def test_cli(httpserver, start, end, returncode, verbose):
    confirmed = "-c" if verbose else "-C"
    with open("./tests/skip.ics", encoding="utf-8") as ics:
        httpserver.expect_request("/skip.ics"). \
            respond_with_data(ics.read(), content_type="text/plain")
        result = subprocess.run([sys.executable, "-m", "ymcacals.ymcacals",
            "-u", Path(__file__).parent / "skip.csv", "-o", "/dev/stdout",
            "--test_pfx", httpserver.url_for("/"), "--delta", "0.1",
            "--start", start, "--end", end, confirmed,],
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        assert result.returncode == returncode
